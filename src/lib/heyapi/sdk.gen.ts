// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as ClientOptions, TDataShape } from "./client";
import { client as _heyApiClient } from "./client.gen";
import type {
  DeleteApiProductsByIdData,
  DeleteApiProductsByIdErrors,
  DeleteApiProductsByIdResponses,
  DeleteApiUsersByIdData,
  DeleteApiUsersByIdErrors,
  DeleteApiUsersByIdResponses,
  GetApiCategoriesByIdData,
  GetApiCategoriesByIdErrors,
  GetApiCategoriesByIdResponses,
  GetApiCategoriesData,
  GetApiCategoriesErrors,
  GetApiCategoriesResponses,
  GetApiOrdersByIdData,
  GetApiOrdersByIdErrors,
  GetApiOrdersByIdResponses,
  GetApiOrdersData,
  GetApiOrdersErrors,
  GetApiOrdersResponses,
  GetApiProductsByIdData,
  GetApiProductsByIdErrors,
  GetApiProductsByIdResponses,
  GetApiProductsData,
  GetApiProductsErrors,
  GetApiProductsResponses,
  GetApiUsersByIdData,
  GetApiUsersByIdErrors,
  GetApiUsersByIdResponses,
  GetApiUsersData,
  GetApiUsersErrors,
  GetApiUsersResponses,
  PostApiCategoriesData,
  PostApiCategoriesErrors,
  PostApiCategoriesResponses,
  PostApiOrdersData,
  PostApiOrdersErrors,
  PostApiOrdersResponses,
  PostApiProductsData,
  PostApiProductsErrors,
  PostApiProductsResponses,
  PostApiUsersData,
  PostApiUsersErrors,
  PostApiUsersResponses,
  PutApiOrdersByIdData,
  PutApiOrdersByIdErrors,
  PutApiOrdersByIdResponses,
  PutApiProductsByIdData,
  PutApiProductsByIdErrors,
  PutApiProductsByIdResponses,
  PutApiUsersByIdData,
  PutApiUsersByIdErrors,
  PutApiUsersByIdResponses,
} from "./types.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * List all products with pagination
 * Retrieve a paginated list of products with optional filtering
 */
export const getApiProducts = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiProductsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiProductsResponses,
    GetApiProductsErrors,
    ThrowOnError
  >({
    url: "/api/products",
    ...options,
  });
};

/**
 * Create a new product
 * Create a new product with the provided details
 */
export const postApiProducts = <ThrowOnError extends boolean = false>(
  options: Options<PostApiProductsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiProductsResponses,
    PostApiProductsErrors,
    ThrowOnError
  >({
    url: "/api/products",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete a product by ID
 * Delete a specific product by its ID
 */
export const deleteApiProductsById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiProductsByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiProductsByIdResponses,
    DeleteApiProductsByIdErrors,
    ThrowOnError
  >({
    url: "/api/products/{id}",
    ...options,
  });
};

/**
 * Get a single product by ID
 * Retrieve a specific product by its ID
 */
export const getApiProductsById = <ThrowOnError extends boolean = false>(
  options: Options<GetApiProductsByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiProductsByIdResponses,
    GetApiProductsByIdErrors,
    ThrowOnError
  >({
    url: "/api/products/{id}",
    ...options,
  });
};

/**
 * Update a product by ID
 * Update an existing product with new information
 */
export const putApiProductsById = <ThrowOnError extends boolean = false>(
  options: Options<PutApiProductsByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PutApiProductsByIdResponses,
    PutApiProductsByIdErrors,
    ThrowOnError
  >({
    url: "/api/products/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List all categories
 * Retrieve all available product categories
 */
export const getApiCategories = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiCategoriesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiCategoriesResponses,
    GetApiCategoriesErrors,
    ThrowOnError
  >({
    url: "/api/categories",
    ...options,
  });
};

/**
 * Create a new category
 * Create a new product category
 */
export const postApiCategories = <ThrowOnError extends boolean = false>(
  options: Options<PostApiCategoriesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiCategoriesResponses,
    PostApiCategoriesErrors,
    ThrowOnError
  >({
    url: "/api/categories",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get a single category by ID
 * Retrieve a specific category by its ID
 */
export const getApiCategoriesById = <ThrowOnError extends boolean = false>(
  options: Options<GetApiCategoriesByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiCategoriesByIdResponses,
    GetApiCategoriesByIdErrors,
    ThrowOnError
  >({
    url: "/api/categories/{id}",
    ...options,
  });
};

/**
 * List all orders with pagination
 * Retrieve a paginated list of orders
 */
export const getApiOrders = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiOrdersData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiOrdersResponses,
    GetApiOrdersErrors,
    ThrowOnError
  >({
    url: "/api/orders",
    ...options,
  });
};

/**
 * Create a new order
 * Create a new order with order items
 */
export const postApiOrders = <ThrowOnError extends boolean = false>(
  options: Options<PostApiOrdersData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiOrdersResponses,
    PostApiOrdersErrors,
    ThrowOnError
  >({
    url: "/api/orders",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get a single order by ID
 * Retrieve a specific order by its ID
 */
export const getApiOrdersById = <ThrowOnError extends boolean = false>(
  options: Options<GetApiOrdersByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiOrdersByIdResponses,
    GetApiOrdersByIdErrors,
    ThrowOnError
  >({
    url: "/api/orders/{id}",
    ...options,
  });
};

/**
 * Update order status
 * Update the status of an existing order
 */
export const putApiOrdersById = <ThrowOnError extends boolean = false>(
  options: Options<PutApiOrdersByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PutApiOrdersByIdResponses,
    PutApiOrdersByIdErrors,
    ThrowOnError
  >({
    url: "/api/orders/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List all users with pagination
 * Retrieve a paginated list of users
 */
export const getApiUsers = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiUsersData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiUsersResponses,
    GetApiUsersErrors,
    ThrowOnError
  >({
    url: "/api/users",
    ...options,
  });
};

/**
 * Create a new user
 * Create a new user account
 */
export const postApiUsers = <ThrowOnError extends boolean = false>(
  options: Options<PostApiUsersData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiUsersResponses,
    PostApiUsersErrors,
    ThrowOnError
  >({
    url: "/api/users",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete a user by ID
 * Delete a specific user by their ID
 */
export const deleteApiUsersById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiUsersByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiUsersByIdResponses,
    DeleteApiUsersByIdErrors,
    ThrowOnError
  >({
    url: "/api/users/{id}",
    ...options,
  });
};

/**
 * Get a single user by ID
 * Retrieve a specific user by their ID
 */
export const getApiUsersById = <ThrowOnError extends boolean = false>(
  options: Options<GetApiUsersByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiUsersByIdResponses,
    GetApiUsersByIdErrors,
    ThrowOnError
  >({
    url: "/api/users/{id}",
    ...options,
  });
};

/**
 * Update a user by ID
 * Update an existing user's information
 */
export const putApiUsersById = <ThrowOnError extends boolean = false>(
  options: Options<PutApiUsersByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PutApiUsersByIdResponses,
    PutApiUsersByIdErrors,
    ThrowOnError
  >({
    url: "/api/users/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};
