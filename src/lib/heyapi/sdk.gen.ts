// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as ClientOptions, TDataShape } from "./client";
import { client as _heyApiClient } from "./client.gen";
import type {
  GetApiCategoriesByIdData,
  GetApiCategoriesByIdErrors,
  GetApiCategoriesByIdResponses,
  GetApiCategoriesData,
  GetApiCategoriesErrors,
  GetApiCategoriesResponses,
  GetApiOrdersByIdData,
  GetApiOrdersByIdErrors,
  GetApiOrdersByIdResponses,
  GetApiOrdersData,
  GetApiOrdersErrors,
  GetApiOrdersResponses,
  GetApiProductsByIdData,
  GetApiProductsByIdErrors,
  GetApiProductsByIdResponses,
  GetApiProductsData,
  GetApiProductsErrors,
  GetApiProductsResponses,
  GetApiUsersByIdData,
  GetApiUsersByIdErrors,
  GetApiUsersByIdResponses,
  PostApiCategoriesData,
  PostApiCategoriesErrors,
  PostApiCategoriesResponses,
  PostApiOrdersData,
  PostApiOrdersErrors,
  PostApiOrdersResponses,
  PostApiProductsData,
  PostApiProductsErrors,
  PostApiProductsResponses,
  PostApiUsersData,
  PostApiUsersErrors,
  PostApiUsersResponses,
  PutApiOrdersByIdStatusData,
  PutApiOrdersByIdStatusErrors,
  PutApiOrdersByIdStatusResponses,
  PutApiProductsByIdData,
  PutApiProductsByIdErrors,
  PutApiProductsByIdResponses,
} from "./types.gen";
import {
  zGetApiCategoriesByIdData,
  zGetApiCategoriesByIdResponse,
  zGetApiCategoriesData,
  zGetApiCategoriesResponse,
  zGetApiOrdersByIdData,
  zGetApiOrdersByIdResponse,
  zGetApiOrdersData,
  zGetApiOrdersResponse,
  zGetApiProductsByIdData,
  zGetApiProductsByIdResponse,
  zGetApiProductsData,
  zGetApiProductsResponse,
  zGetApiUsersByIdData,
  zGetApiUsersByIdResponse,
  zPostApiCategoriesData,
  zPostApiCategoriesResponse,
  zPostApiOrdersData,
  zPostApiOrdersResponse,
  zPostApiProductsData,
  zPostApiProductsResponse,
  zPostApiUsersData,
  zPostApiUsersResponse,
  zPutApiOrdersByIdStatusData,
  zPutApiOrdersByIdStatusResponse,
  zPutApiProductsByIdData,
  zPutApiProductsByIdResponse,
} from "./zod.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * List all products with pagination
 * Retrieve a paginated list of products with optional filtering
 */
export const getApiProducts = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiProductsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiProductsResponses,
    GetApiProductsErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetApiProductsData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetApiProductsResponse.parseAsync(data);
    },
    url: "/api/products",
    ...options,
  });
};

/**
 * Create a new product
 * Create a new product with the provided details
 */
export const postApiProducts = <ThrowOnError extends boolean = false>(
  options: Options<PostApiProductsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiProductsResponses,
    PostApiProductsErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zPostApiProductsData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostApiProductsResponse.parseAsync(data);
    },
    url: "/api/products",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get a single product by ID
 * Retrieve a specific product by its ID
 */
export const getApiProductsById = <ThrowOnError extends boolean = false>(
  options: Options<GetApiProductsByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiProductsByIdResponses,
    GetApiProductsByIdErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetApiProductsByIdData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetApiProductsByIdResponse.parseAsync(data);
    },
    url: "/api/products/{id}",
    ...options,
  });
};

/**
 * Update a product by ID
 * Update an existing product with new information
 */
export const putApiProductsById = <ThrowOnError extends boolean = false>(
  options: Options<PutApiProductsByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PutApiProductsByIdResponses,
    PutApiProductsByIdErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zPutApiProductsByIdData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPutApiProductsByIdResponse.parseAsync(data);
    },
    url: "/api/products/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List all categories
 * Retrieve all available product categories
 */
export const getApiCategories = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiCategoriesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiCategoriesResponses,
    GetApiCategoriesErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetApiCategoriesData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetApiCategoriesResponse.parseAsync(data);
    },
    url: "/api/categories",
    ...options,
  });
};

/**
 * Create a new category
 * Create a new product category
 */
export const postApiCategories = <ThrowOnError extends boolean = false>(
  options: Options<PostApiCategoriesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiCategoriesResponses,
    PostApiCategoriesErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zPostApiCategoriesData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostApiCategoriesResponse.parseAsync(data);
    },
    url: "/api/categories",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get a single category by ID with products
 * Retrieve a specific category with all its associated products
 */
export const getApiCategoriesById = <ThrowOnError extends boolean = false>(
  options: Options<GetApiCategoriesByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiCategoriesByIdResponses,
    GetApiCategoriesByIdErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetApiCategoriesByIdData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetApiCategoriesByIdResponse.parseAsync(data);
    },
    url: "/api/categories/{id}",
    ...options,
  });
};

/**
 * List all orders with optional user filter
 * Retrieve orders with optional filtering by user ID
 */
export const getApiOrders = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiOrdersData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiOrdersResponses,
    GetApiOrdersErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetApiOrdersData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetApiOrdersResponse.parseAsync(data);
    },
    url: "/api/orders",
    ...options,
  });
};

/**
 * Create a new order
 * Create a new order with order items
 */
export const postApiOrders = <ThrowOnError extends boolean = false>(
  options: Options<PostApiOrdersData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiOrdersResponses,
    PostApiOrdersErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zPostApiOrdersData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostApiOrdersResponse.parseAsync(data);
    },
    url: "/api/orders",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get a single order by ID with items
 * Retrieve a specific order with all its order items
 */
export const getApiOrdersById = <ThrowOnError extends boolean = false>(
  options: Options<GetApiOrdersByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiOrdersByIdResponses,
    GetApiOrdersByIdErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetApiOrdersByIdData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetApiOrdersByIdResponse.parseAsync(data);
    },
    url: "/api/orders/{id}",
    ...options,
  });
};

/**
 * Update order status by ID
 * Update the status of an existing order
 */
export const putApiOrdersByIdStatus = <ThrowOnError extends boolean = false>(
  options: Options<PutApiOrdersByIdStatusData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PutApiOrdersByIdStatusResponses,
    PutApiOrdersByIdStatusErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zPutApiOrdersByIdStatusData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPutApiOrdersByIdStatusResponse.parseAsync(data);
    },
    url: "/api/orders/{id}/status",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Create a new user
 * Create a new user account
 */
export const postApiUsers = <ThrowOnError extends boolean = false>(
  options: Options<PostApiUsersData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiUsersResponses,
    PostApiUsersErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zPostApiUsersData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zPostApiUsersResponse.parseAsync(data);
    },
    url: "/api/users",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get user profile by ID
 * Retrieve a user's profile information
 */
export const getApiUsersById = <ThrowOnError extends boolean = false>(
  options: Options<GetApiUsersByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiUsersByIdResponses,
    GetApiUsersByIdErrors,
    ThrowOnError
  >({
    requestValidator: async (data) => {
      return await zGetApiUsersByIdData.parseAsync(data);
    },
    responseValidator: async (data) => {
      return await zGetApiUsersByIdResponse.parseAsync(data);
    },
    url: "/api/users/{id}",
    ...options,
  });
};
