name: Contract Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Allow manual triggering

jobs:
  contract-tests:
    name: API Contract Testing
    runs-on: ubuntu-latest
    
    env:
      # Database configuration for testing
      DATABASE_URL: "mysql://root:password@localhost:3306/catalyst_test"
      NODE_ENV: test
      
      # API configuration
      NEXT_PUBLIC_AUTHORITY: http://localhost:3000
      
      # Auth configuration
      AUTH_SECRET: "test-secret-for-contract-testing"
      NEXT_PUBLIC_AUTH_REDIRECT_URL: /dashboard

    services:
      # Start MySQL service for testing
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: catalyst_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Setup database schema
        run: npx prisma db push --force-reset

      - name: Seed test database
        run: npm run seed

      - name: Generate OpenAPI spec
        run: npx @hey-api/openapi-ts -f heyapi.config.ts

      - name: Start API server
        run: |
          npm run build
          npm start &
          echo "Waiting for server to start..."
          sleep 10
          echo "Server should be running on http://localhost:3000"

      - name: Run contract tests
        run: npm run test:contract
        env:
          # Ensure tests can connect to the running API
          API_BASE_URL: http://localhost:3000

      - name: Run contract violation tests
        run: npm run test:violations
        env:
          API_BASE_URL: http://localhost:3000
        continue-on-error: true # Violation tests are expected to fail

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: contract-test-results
          path: |
            *.log
            test-results/
          retention-days: 7

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let comment = '## 🔍 Contract Test Results\n\n';
            
            try {
              // Check if contract tests passed
              const contractExitCode = process.env.CONTRACT_EXIT_CODE || '0';
              const violationExitCode = process.env.VIOLATION_EXIT_CODE || '0';
              
              if (contractExitCode === '0') {
                comment += '✅ **Contract Tests**: PASSED\n';
                comment += 'All API endpoints conform to the OpenAPI specification.\n\n';
              } else {
                comment += '❌ **Contract Tests**: FAILED\n';
                comment += 'API endpoints do not conform to the OpenAPI specification.\n\n';
              }
              
              if (violationExitCode === '0') {
                comment += '✅ **Violation Tests**: PASSED\n';
                comment += 'Contract violation detection is working correctly.\n\n';
              } else {
                comment += '⚠️ **Violation Tests**: Expected failures detected\n';
                comment += 'Contract violations were properly identified.\n\n';
              }
              
              comment += '---\n';
              comment += '*This comment was automatically generated by the contract testing workflow.*';
              
            } catch (error) {
              comment += '❌ **Error**: Unable to process test results\n';
              comment += `Error: ${error.message}`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: contract-tests
    
    env:
      DATABASE_URL: "mysql://root:password@localhost:3306/catalyst_test"
      NODE_ENV: test

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: catalyst_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Setup database schema
        run: npx prisma db push --force-reset

      - name: Seed test database
        run: npm run seed

      - name: Run Jest tests
        run: npm test

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./coverage/lcov.info
          flags: integration
          name: integration-tests 